"use strict"; function _toConsumableArray(t) { if (Array.isArray(t)) { for (var e = 0, i = Array(t.length); e < t.length; e++)i[e] = t[e]; return i } return Array.from(t) } var _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (t) { return typeof t } : function (t) { return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t }, _slicedToArray = function () { function t(t, e) { var i = [], n = !0, r = !1, o = void 0; try { for (var s, a = t[Symbol.iterator](); !(n = (s = a.next()).done) && (i.push(s.value), !e || i.length !== e); n = !0); } catch (l) { r = !0, o = l } finally { try { !n && a["return"] && a["return"]() } finally { if (r) throw o } } return i } return function (e, i) { if (Array.isArray(e)) return e; if (Symbol.iterator in Object(e)) return t(e, i); throw new TypeError("Invalid attempt to destructure non-iterable instance") } }(); !function () { function t(t, e) { function i(t, e) { if (t.data && (!t.data.staticClass || t.data.staticClass.indexOf("ignore") === -1)) { var i = t.data.staticClass ? t.data.staticClass + " " : ""; t.data.staticClass = i + e } } function n(t) { return t.__underlying_element } var r = { options: { type: Object, "default": { layoutMode: "masonry", masonry: { gutter: 10 } } }, itemSelector: { type: String, "default": "item" }, list: { type: Array, required: !0 } }, o = { name: "isotope", props: r, render: function (t) { var e = this, n = {}, r = this.prevChildren = this.children, o = this.$slots["default"] || [], s = this.children = [], a = this.removedKeys = []; o.forEach(function (t) { return i(t, e.itemSelector) }); for (var l = 0; l < o.length; l++) { var u = o[l]; if (u.tag) if (null != u.key && 0 !== String(u.key).indexOf("__vlist")) s.push(u), n[u.key] = u; else { var f = u.componentOptions, c = f ? f.Ctor.options.name || f.tag || "" : u.tag; console.log("Warning template error: isotope children must be keyed: <" + c + ">") } } var d = this.displayChildren = [].concat(s); if (r) for (var h = 0; h < r.length; h++) { var y = r[h]; n[y.key] || (d.splice(h, 0, y), a.push(y.key)) } return t("div", null, d) }, mounted: function () { var t = this, i = Object.assign({}, this.compiledOptions), r = function (e) { Object.entries(e).forEach(function (i) { var r = _slicedToArray(i, 2), o = r[0], s = r[1]; e[o] = function (e) { var i = n(e); return s.call(t, i.vm, i.index) } }) }; r(i.getSortData || {}), r(i.getFilterData || {}), this._isotopeOptions = i, i.filter && (i.filter = this.buildFilterFunction(i.filter)), this.$nextTick(function () { t.link(), t.listen(); var n = new e(t.$el, i); n._requestUpdate = function () { n._willUpdate || (n._willUpdate = !0, t.$nextTick(function () { n.arrange(), n._willUpdate = !1 })) }, t.iso = n }) }, beforeDestroy: function () { this._listeners.forEach(function (t) { t() }), this._filterlistener && this._filterlistener(), this.iso = null }, beforeUpdate: function () { this._oldChidren = Array.prototype.slice.call(this.$el.children) }, updated: function () { var t = this; if (this.iso) { var e = [].concat(_toConsumableArray(this.$el.children)), i = e.filter(function (e) { return !(t._oldChidren.indexOf(e) !== -1) }), n = this.removedKeys.map(function (e) { return Array.from(t.$el.children).find(function (t) { return t.__vue__ && t.__vue__.$vnode.key === e }) }); this.cleanupNodes(), this.link(), (n.length || i.length) && (this.listen(), this.iso.remove(n), this.iso.insert(i), this.iso._requestUpdate()) } }, methods: { cleanupNodes: function () { var t = this; this.removedKeys.reverse(), this._vnode.children = this._vnode.children.filter(function (e) { return !(t.removedKeys.indexOf(e.key) !== -1) }), this.$children = this.$children.filter(function (e) { return !(t.removedKeys.indexOf(e.$vnode.key) !== -1) }) }, link: function () { var t = this, e = this.$slots["default"] || []; e.filter(function (t) { return t.data && t.data.staticClass && !(t.data.staticClass.indexOf("ignore") !== -1) }).forEach(function (e, i) { var n = e.elm; n && (n.__underlying_element = { vm: t.list[i], index: i }) }) }, listen: function () { var t = this; this._listeners = Object.values(this.compiledOptions.getSortData).map(function (e) { return Array.from(t.$el.children).map(function (i, n) { return t.$watch(function () { return e(i) }, function () { t.iso.updateSortData() }) }) }).flat() }, sort: function s(t) { var s = t; "string" == typeof t && (s = { sortBy: t }), this.arrange(s), this.$emit("sort", t) }, buildFilterFunction: function (t) { var e = this._isotopeOptions.getFilterData[t]; return e }, filter: function a(t) { var a = this.buildFilterFunction(t); this.arrange({ filter: a }), this.$emit("filter", t) }, unfilter: function () { this.arrange({ filter: function () { return !0 } }), this.$emit("filter", null) }, layout: function l(t) { var l = t; "string" == typeof t && (l = { layoutMode: t }), this.arrange(l), this.$emit("layout", l) }, arrange: function (t) { this.iso.arrange(t), this.$emit("arrange", t) }, shuffle: function () { this.iso.shuffle(), this.$emit("shuffle"), this.$emit("sort", null) }, getFilteredItemElements: function () { return this.iso.getFilteredItemElements() }, getElementItems: function () { return this.iso.getElementItems() } }, computed: { compiledOptions: function () { var t = Object.assign({}, this.options, { itemSelector: "." + this.itemSelector, isJQueryFiltering: !1 }); return Object.entries(t.getSortData).forEach(function (e) { var i = _slicedToArray(e, 2), n = i[0], r = i[1]; "string" == typeof r && (t.getSortData[n] = function (t) { return t[r] }) }), t } } }; return o } if (typeof exports == "object") { var e = require("isotope-layout"); module.exports = t(e) } else if ("function" == typeof define && define.amd) define(["Isotope"], function (e) { return t(e) }); else if (window.Vue && window.Isotope) { var i = t(window.Isotope); Vue.component("isotope", i) } }();